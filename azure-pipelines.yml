# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
    - master

    # main group for variables
variables:
    -group: mainGroup

pool:
    vmImage: 'ubuntu-latest'

stages:
    # - stage: NpmRunTests
    #   jobs:
    #       - job:
    #         steps:
    #             - task: NodeTool@0
    #               inputs:
    #                   versionSpec: '10.x'
    #               displayName: 'Install Node.js'

    #             - script: npm install
    #               workingDirectory: client
    #               displayName: 'npm install'

    - stage: DeployPackages
      # dependsOn: NpmRunTests
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
      jobs:
          - job:
            steps:
                # Check out the code and keep the token so we can tag the repository
                # - checkout: self
                #   persistCredentials: true
                - script: npm install
                  workingDirectory: client
                  displayName: 'npm install'

                - script: npm run build
                  workingDirectory: client
                  displayName: 'npm run build'
                  
                - script: |
                      sudo apt-get update
                      sudo apt-get -qq install git-ftp
                  displayName: 'Running apt-get to install packages...'
                # $(Build.ArtifactStagingDirectory) instead of syncroot not working
                - script: |
                      git config git-ftp.production.user $FTP_USERNAME
                      git config git-ftp.production.url $FTP_HOST
                      git config git-ftp.production.password $FTP_PASSWORD
                      git config git-ftp.production.syncroot $FTP_SYNC_ROOT
                      git config git-ftp.production.remote-root $FTP_REMOTE_ROOT
                  displayName: 'Setting git config values...'

                - script: |
                      git status
                      git reset --hard
                      git ftp catchup -s production
                      git ftp push -s production --all
                  displayName: 'Pushing FTP packages...'
